# Generated by Django 3.2.7 on 2022-04-04 07:31
import json
import logging

from django.db import migrations
from django.conf import settings
from metcalf.imas.data_migration_tool.data_migration import migrate_data

logger = logging.getLogger(__name__)

def keyword_to_label(keyword):
    keyword_values_in_array = [keyword.DetailedVariable,
                               keyword.VariableLevel3,
                               keyword.VariableLevel2,
                               keyword.VariableLevel1,
                               keyword.Term,
                               keyword.Topic,
                               keyword.Category]

    return next((x for x in keyword_values_in_array if x is not None and x != ""), "")


def keyword_to_breadcrumbs(keyword):
    keyword_values_in_array = [keyword.DetailedVariable,
                               keyword.VariableLevel3,
                               keyword.VariableLevel2,
                               keyword.VariableLevel1,
                               keyword.Term,
                               keyword.Topic,
                               keyword.Category]

    # Remove empty values.
    keyword_values_in_array = [x for x in keyword_values_in_array if x is not None and x != ""]

    # Remove first matching item (this will be the label)
    keyword_values_in_array = keyword_values_in_array[1:]

    # Reverse the breadcrumb order
    keyword_values_in_array.reverse()

    return [" | ".join(keyword_values_in_array)]

def keywords_with_breadcrumb_info(apps):
    ScienceKeyword = apps.get_model('backend', 'ScienceKeyword')
    keywords = ScienceKeyword.objects.all()
    return [{
        'label': keyword_to_label(k),
        'uri': k.uri,
        'breadcrumb': keyword_to_breadcrumbs(k)
    } for k in keywords]

def latest_draft(document):
        all_drafts = document.draftmetadata_set.all()
        return all_drafts[0] if all_drafts else None

def migrate_draft_metadata(apps, schema_editor):
    # We can't import the Person model directly as it may be a newer
    # version than this migration expects. We use the historical version.

    template = json.loads(open('metcalf/imas/data_migration_tool/template.json', 'r').read())
    data_migrations = json.loads(open('metcalf/imas/data_migration_tool/migrations.json', 'r').read())

    Document = apps.get_model('backend', 'Document')
    DraftMetadata = apps.get_model('backend', 'DraftMetadata')
    DocumentAttachment = apps.get_model('backend', 'DocumentAttachment')

    for document in Document.objects.all():
        try:
            draft = latest_draft(document)

            if draft:
                data = draft.data
                data = json.loads(data) if isinstance(data, str) else data
                new_data = migrate_data(data, template, data_migrations)

                # attachments
                if not new_data.get('attachments'):
                    attachments = []

                    # this code could probably be sped up
                    for attachment in DocumentAttachment.objects.all():
                        if attachment.document == document:
                            attachments.append({
                                'id': attachment.id,
                                'file': f'{settings.MEDIA_URL}{attachment.file}',
                                'name': attachment.name,
                                'delete_url': f'{settings.FORCE_SCRIPT_NAME or ""}/delete/{new_data.get("fileIdentifier")}/{attachment.id}',
                                'created': attachment.created,
                                'modified': attachment.modified
                            })
                
                    if len(attachments) > 0:
                        new_data['attachments'] = attachments

                # keywords
                all_keywords = keywords_with_breadcrumb_info(apps)
                old_keywords = new_data.get('identificationInfo', {}).get('keywordsTheme', {}).get('keywords')
                new_keywords = []

                if old_keywords:
                    for old_keyword in old_keywords:
                        new_keyword = next((k for k in all_keywords if (k.get('uri') == old_keyword.get('uri') and k.get('uri') != None)), old_keyword)
                        new_keywords.append(new_keyword)
                    
                    if new_keywords:
                        new_data['identificationInfo']['keywordsTheme'] = {}
                        new_data['identificationInfo']['keywordsTheme']['keywords'] = new_keywords

                DraftMetadata.objects.create(
                    document=document,
                    user=document.owner,
                    data=new_data
                )
        except:
            logger.error(f'failed to migrate document {document.uuid}')
            raise

class Migration(migrations.Migration):

    dependencies = [
        ('backend', '0008_draftmetadata_doirequested'),
    ]

    operations = [
        migrations.RunPython(migrate_draft_metadata)
    ]
